This file contains the errors faced through differetn stages of development and their fixes

#VERSION 1: Main Menu

Issues with menu navigation:
    Problem: The program sometimes crashed when I tried to navigate back to the main menu. This was due to the way the navigation stack was handled.
    Solution:Added error handling with try-except blocks around menu navigation code to manage navigation better and made sure the program could smoothly return to the main menu without issues.


#VERSION2 : Customer Details:
 Issue with data storage:
     Problem: Customer details weren’t being saved correctly, so the information was getting lost.
     Solution: I used a dictionary to store customer info like name, address, and phone number. This way, all details are properly saved and can be accessed later.


#VERSION 3: Adding bean varieties
 1. Issues with bean selection list:
     Problem: The list of beans didn’t show the roast levels, which was confusing.
     Solution:  I fixed this by making sure the list clearly displayed each bean type with its roast options, making it easier to understand and select.
2.  Issues with data handling:
    1. Problem: The program was only capturing the last selected bean, so previous choices were getting overwritten.
     Solution: I updated the data handling by using a nested dictionary to keep track of each bean type and its details. This ensured that all selected beans and their attributes were recorded correctly..
    2. Problem: user could add more than 5 kg of beans
       Solution:I added a check to make sure that the total quantity of beans does not exceed 5 kg. If users tried to enter too much, they were given an error message.


#VERSION 4: order summary 
  1. Issues with display formatting:
     Problem: The order summary was a jumbled mess of text, which was hard to read.
     Solution: I improved the formatting by adding line breaks and clear labels. This made the summary much easier to read and understand.
 2. Bean Order Details:
     Problem: The summary was missing some details about the beans, such as the roast level and whether they should be ground.
     Solution: I updated the data structure to include all the necessary details about each bean. I then made sure the summary code pulled and displayed this information correctly.
 3.  Handling error:
     Problem: The program would crash if users skipped entering required details.
     Solution: I added checks to ensure all required fields are filled out before moving to the summary. Clear error messages guide users to provide any missing information.


#VERSION 5: complete functionality
 1. UI AESTHETICS
    Problem: The default message boxes were functional but lacked visual appeal, which could make the interface feel less engaging.
    Solution:  While EasyGUI does not support advanced UI styling, I focused on making sure the message boxes were used effectively to communicate with users. Improved the clarity and helpfulness of messages to enhance the user experience.
 2. Enhanced error handling
    Problem: Error messages weren’t very helpful when users made mistakes, leading to confusion.
    Solution: I created more detailed error messages to guide users in correcting their inputs. This helps users understand what went wrong and how to fix it
 3. Data Validation:
    Problem:  Some inputs weren’t being validated properly, leading to inconsistencies.
    Solution: I added thorough data validation throughout the order process to make sure all inputs were correct. This helped avoid errors and ensured the information was accurate.
  
